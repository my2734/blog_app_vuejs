{"ast":null,"code":"import axios from 'axios';\nfunction getCookie(cname) {\n  let name = cname + \"=\";\n  let decodedCookie = decodeURIComponent(document.cookie);\n  let ca = decodedCookie.split(';');\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\nvar isAdmin = false;\nvar isAuthentication = false;\nconst token = getCookie('token');\nif (token) isAuthentication = true;\naxios.get('http://localhost:8080/api/isAdmin/' + token).then(response => {\n  if (response.status == 200) {\n    if (response.data == false) {\n      isAdmin = true;\n    } else {\n      isAdmin = false;\n    }\n  }\n}).catch(() => {\n  return false;\n});\nimport Vuex from 'vuex';\nvar store = new Vuex.Store({\n  state() {\n    return {\n      statusOverly: false,\n      statusModal: false,\n      statusBackground: true,\n      isAdmin: isAdmin,\n      auth: {\n        isAuthentication: isAuthentication\n      },\n      list_post: []\n    };\n  },\n  mutations: {\n    TOGGLE_AUTH(state) {\n      state.auth.isAuthentication = !state.auth.isAuthentication;\n    },\n    GET_LIST_POST(state, list_post) {\n      state.list_post = list_post;\n    }\n  },\n  actions: {\n    async getListPost({\n      commit\n    }, page) {\n      try {\n        const response = await axios.get('http://localhost:8080/api/post?page=' + page);\n        commit('GET_LIST_POST', response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["axios","getCookie","cname","name","decodedCookie","decodeURIComponent","document","cookie","ca","split","i","length","c","charAt","substring","indexOf","isAdmin","isAuthentication","token","get","then","response","status","data","catch","Vuex","store","Store","state","statusOverly","statusModal","statusBackground","auth","list_post","mutations","TOGGLE_AUTH","GET_LIST_POST","actions","getListPost","commit","page","error","console","log"],"sources":["D:/trainningVuejs/blog_app_vuejs/client/src/store/index.js"],"sourcesContent":["import axios from 'axios'\r\n \r\nfunction getCookie(cname) {\r\n    let name = cname + \"=\";\r\n    let decodedCookie = decodeURIComponent(document.cookie);\r\n    let ca = decodedCookie.split(';');\r\n    for(let i = 0; i <ca.length; i++) {\r\n      let c = ca[i];\r\n      while (c.charAt(0) == ' ') {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n  var isAdmin = false;\r\n  var isAuthentication = false;\r\n  const token = getCookie('token');\r\n  if(token) isAuthentication = true;\r\n  axios.get('http://localhost:8080/api/isAdmin/'+token)\r\n  .then((response) => {\r\n      if(response.status==200){\r\n        if(response.data == false){\r\n          isAdmin = true\r\n        }else{\r\n          isAdmin = false\r\n        }\r\n      }\r\n    })\r\n  .catch(() => {\r\n      return false;\r\n  });\r\n\r\n\r\n\r\n\r\n  import Vuex from 'vuex'\r\n  var store = new Vuex.Store({\r\n    state () {\r\n        return {\r\n          statusOverly: false,\r\n          statusModal: false,\r\n          statusBackground: true,\r\n          isAdmin: isAdmin,\r\n          auth: {\r\n            isAuthentication: isAuthentication,\r\n          },\r\n          list_post: [],\r\n        }\r\n      },\r\n      mutations: {\r\n        TOGGLE_AUTH(state){\r\n          state.auth.isAuthentication = !state.auth.isAuthentication\r\n        },\r\n        GET_LIST_POST(state, list_post){\r\n          state.list_post = list_post\r\n        }\r\n      },\r\n      actions: {\r\n        async getListPost({commit},page){\r\n          try{\r\n            const response = await axios.get('http://localhost:8080/api/post?page='+page)\r\n            commit('GET_LIST_POST',response.data)\r\n          }catch(error){\r\n            console.log(error)\r\n          }\r\n        }\r\n      }\r\n  })\r\n  \r\n  export default store"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,CAACC,KAAK,EAAE;EACtB,IAAIC,IAAI,GAAGD,KAAK,GAAG,GAAG;EACtB,IAAIE,aAAa,GAAGC,kBAAkB,CAACC,QAAQ,CAACC,MAAM,CAAC;EACvD,IAAIC,EAAE,GAAGJ,aAAa,CAACK,KAAK,CAAC,GAAG,CAAC;EACjC,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAEF,EAAE,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IAChC,IAAIE,CAAC,GAAGJ,EAAE,CAACE,CAAC,CAAC;IACb,OAAOE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;MACzBD,CAAC,GAAGA,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC;IACpB;IACA,IAAIF,CAAC,CAACG,OAAO,CAACZ,IAAI,CAAC,IAAI,CAAC,EAAE;MACxB,OAAOS,CAAC,CAACE,SAAS,CAACX,IAAI,CAACQ,MAAM,EAAEC,CAAC,CAACD,MAAM,CAAC;IAC3C;EACF;EACA,OAAO,EAAE;AACX;AACA,IAAIK,OAAO,GAAG,KAAK;AACnB,IAAIC,gBAAgB,GAAG,KAAK;AAC5B,MAAMC,KAAK,GAAGjB,SAAS,CAAC,OAAO,CAAC;AAChC,IAAGiB,KAAK,EAAED,gBAAgB,GAAG,IAAI;AACjCjB,KAAK,CAACmB,GAAG,CAAC,oCAAoC,GAACD,KAAK,CAAC,CACpDE,IAAI,CAAEC,QAAQ,IAAK;EAChB,IAAGA,QAAQ,CAACC,MAAM,IAAE,GAAG,EAAC;IACtB,IAAGD,QAAQ,CAACE,IAAI,IAAI,KAAK,EAAC;MACxBP,OAAO,GAAG,IAAI;IAChB,CAAC,MAAI;MACHA,OAAO,GAAG,KAAK;IACjB;EACF;AACF,CAAC,CAAC,CACHQ,KAAK,CAAC,MAAM;EACT,OAAO,KAAK;AAChB,CAAC,CAAC;AAKF,OAAOC,IAAI,MAAM,MAAM;AACvB,IAAIC,KAAK,GAAG,IAAID,IAAI,CAACE,KAAK,CAAC;EACzBC,KAAK,GAAI;IACL,OAAO;MACLC,YAAY,EAAE,KAAK;MACnBC,WAAW,EAAE,KAAK;MAClBC,gBAAgB,EAAE,IAAI;MACtBf,OAAO,EAAEA,OAAO;MAChBgB,IAAI,EAAE;QACJf,gBAAgB,EAAEA;MACpB,CAAC;MACDgB,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,SAAS,EAAE;IACTC,WAAW,CAACP,KAAK,EAAC;MAChBA,KAAK,CAACI,IAAI,CAACf,gBAAgB,GAAG,CAACW,KAAK,CAACI,IAAI,CAACf,gBAAgB;IAC5D,CAAC;IACDmB,aAAa,CAACR,KAAK,EAAEK,SAAS,EAAC;MAC7BL,KAAK,CAACK,SAAS,GAAGA,SAAS;IAC7B;EACF,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,WAAW,CAAC;MAACC;IAAM,CAAC,EAACC,IAAI,EAAC;MAC9B,IAAG;QACD,MAAMnB,QAAQ,GAAG,MAAMrB,KAAK,CAACmB,GAAG,CAAC,sCAAsC,GAACqB,IAAI,CAAC;QAC7ED,MAAM,CAAC,eAAe,EAAClB,QAAQ,CAACE,IAAI,CAAC;MACvC,CAAC,QAAMkB,KAAK,EAAC;QACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF;EACF;AACJ,CAAC,CAAC;AAEF,eAAef,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}